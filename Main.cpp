#include<iostream>
// Урок 43. Модуль 6. Введение в указатели.

void my_swap(int num1, int num2) {
	int tmp = num1;
	num1 = num2;
	num2 = tmp;
}
void p_swap(int* pointer1, int* pointer2) {
	int tmp = *pointer1;
	*pointer1 = *pointer2;
	*pointer2 = tmp;
}
// Прототип
void p_sum_arr(int arr[], const int length, int* var);

int main() {
	setlocale(LC_ALL, "RU");
	int n, m;
	// УКАЗАТЕЛИ НА ПЕРЕМЕННЫЕ
	
	n = 7;
	std::cout << "n = " << n << std::endl;	
	std::cout << "&n = " << &n << std::endl; // Операция обращения к памяти элемента ("& - оперсанд")

	// Указатели - это ПЕРЕМЕННЫЕ, созданные для хранения адресов ячеек оперативной памяти устройства. 
	// Например: указатель может хранить адресс переменной.
	// Создадим указатель:
	int* pn = &n;	// создание указателя на переменную n. (Направление указателя на переменную n.)
	std::cout << "pn = " << pn << std::endl;
	std::cout << "*pn = " << *pn << std::endl; // процесс разыменование.

	// Разыменование - операция, применяемая к указателям и позволяющая обращаться
	//  через них к тем участкам памяти, на которые они направлены.
	*pn = 15;
	std::cout << "n = " << n << std::endl;
	std::cout << "-------------------------\n";
	m = 42;
	pn = &m; // перенаправление указателя на другую область памяти n.
	std::cout << "m = " << m << std::endl;
	std::cout << "&m = " << &m << std::endl;
	std::cout << "pn = " << pn << std::endl;
	std::cout << "*pn = " << *pn << std::endl;

	*pn = 105; // выполним разыменование pn.
	std::cout << "m = " << m << std::endl;

	int* pm = &m; // объявим указатель pm.
	std::cout << "pm = " << pm << std::endl;
	
	// Размер указателя НЕ ЗАВИСИТ от типа памяти, на которую он направлен.
	// Он зависит от разрядности ОС. Например: В виндоус х64 размер указателя - 64 бит (8 байт).
	

	// УКАЗАТЕЛИ И МАССИВЫ
	
	const int size = 5;
	int arr[size]{ 70, 80, 90, 100, 110 };

	int* parr = &arr[2];
	std::cout << "*parr = " << *parr << std::endl;
	std::cout << "parr = " << parr << std::endl;
	std::cout << "parr + 1 = " << parr + 1 << std::endl; // pointer + n = pointer + n * тип_данных
	std::cout << "parr + 1 = " << *(parr + 1) << std::endl;
	std::cout << "parr - 1 = " << *(parr - 1) << std::endl;

	// Арифметика указателей - процесс перенаправления указателя на другую область памяти по средствам применения
	// целочисленных операций сложения и вычитания.

	parr++; // перенаправление на элемент 100
	parr -= 2; // перенаправление на элемент 80

	parr = &arr[0];
	std::cout << "Массив:\n";
	for (int i = 0; i < size; i++)
		std::cout << *(parr + i) << ' ';
	std::cout << std::endl;

	// МАССИВ - это указатель, направленный на первый элемент упорядоченный однотипной группы элементов.

	std::cout << arr[3] << std::endl; // тоже самое *(arr + 3)

	// Ограничения арифметики указателей:
	// 1. Нельзя выполнять умножение и деления адреса;
	// 2. Нельзя применять нецелочисленные значения при сдвиге указателя;
	// 3. Можно вычитать значения одного указателя из другого, но нельзя их складывать.
	

	// УКАЗАТЕЛИ и ФУНКЦИИ
	// МОДУЛЬ 6. Урок 44. Указатели как параметры функции
	
	n = 7; m = 15;
	std::cout << n << ' ' << m << std::endl;
	//my_swap(n, m);	// не работает, так как параметры (num1 и num2) - это лишь копии аргументов (n и m).
	p_swap(&n, &m);
	std::cout << n << ' ' << m << std::endl;
	

	// Задача 1. Сумма через указатель.
	std::cout << "Задача 1.\nМассив:\n";
	const int size1 = 5;
	int arr1[size1]{ 10, 15, 5, 7, 5 };
	int sum; // не инициализируем переменную.
	for (int i = 0; i < size1; i++)
		std::cout << *(arr1 + i) << ' ';
	std::cout << std::endl;
	p_sum_arr(arr1, size1, &sum);
	std::cout << "Сумма элементов = " << sum << "\n\n";

	// Области применения указателей:
	// 1. Реализация такой технологии, как массивы;
	// 2. Доступ к элементам, расположенным в других блоках программы;
	// 3. Обращение к динамической памяти;
	// 4. Создание сложных динамических структур данных;
	// 5. Реализация полиморфизма при наследовании классов.

	return 0;
}
// Функция задачи 1:
void p_sum_arr(int arr[], const int length, int* var) {
	*var = 0;
	for (int i = 0; i < length; i++)
		*var += *(arr + i);
}